
lab8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000850  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000402  00802000  00000850  000008e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00802402  00802402  00000ce6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ce6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000d58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006857  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f00  00000000  00000000  00007687  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b02  00000000  00000000  0000b587  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  0000c08c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004a82  00000000  00000000  0000c2e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047f  00000000  00000000  00010d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000111e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__ctors_end>
   4:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
   8:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
   c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  10:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  14:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  18:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  1c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  20:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  24:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  28:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  2c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  30:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  34:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  38:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  3c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  40:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  44:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  48:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  4c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  50:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_20>
  54:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  58:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  5c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  60:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  64:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  68:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  6c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  70:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  74:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  78:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  7c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  80:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  84:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  88:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  8c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  90:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  94:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  98:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  9c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  a0:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  a4:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  a8:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  ac:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  b0:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  b4:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  b8:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  bc:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  c0:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  c4:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  c8:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  cc:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  d0:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  d4:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  d8:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  dc:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  e0:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  e4:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  e8:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  ec:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  f0:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  f4:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  f8:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
  fc:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 100:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 104:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 108:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 10c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 110:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 114:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 118:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 11c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 120:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 124:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 128:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 12c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 130:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 134:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 138:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 13c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 140:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 144:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 148:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 14c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 150:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 154:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 158:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 15c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 160:	0c 94 c2 01 	jmp	0x384	; 0x384 <__vector_88>
 164:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 168:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 16c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 170:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 174:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 178:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 17c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 180:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 184:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 188:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 18c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 190:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 194:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 198:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 19c:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1a0:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1a4:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1a8:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1ac:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1b0:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1b4:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1b8:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1bc:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1c0:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1c4:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1c8:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1cc:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1d0:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1d4:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1d8:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1dc:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1e0:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1e4:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1e8:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1ec:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1f0:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1f4:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1f8:	0c 94 88 01 	jmp	0x310	; 0x310 <__bad_interrupt>
 1fc:	0f 02       	muls	r16, r31
 1fe:	19 02       	muls	r17, r25
 200:	59 02       	muls	r21, r25
 202:	28 02       	muls	r18, r24
 204:	32 02       	muls	r19, r18
 206:	3c 02       	muls	r19, r28
 208:	59 02       	muls	r21, r25
 20a:	59 02       	muls	r21, r25
 20c:	59 02       	muls	r21, r25
 20e:	59 02       	muls	r21, r25
 210:	59 02       	muls	r21, r25
 212:	59 02       	muls	r21, r25
 214:	59 02       	muls	r21, r25
 216:	59 02       	muls	r21, r25
 218:	59 02       	muls	r21, r25
 21a:	59 02       	muls	r21, r25
 21c:	59 02       	muls	r21, r25
 21e:	59 02       	muls	r21, r25
 220:	59 02       	muls	r21, r25
 222:	59 02       	muls	r21, r25
 224:	59 02       	muls	r21, r25
 226:	59 02       	muls	r21, r25
 228:	59 02       	muls	r21, r25
 22a:	59 02       	muls	r21, r25
 22c:	59 02       	muls	r21, r25
 22e:	59 02       	muls	r21, r25
 230:	59 02       	muls	r21, r25
 232:	59 02       	muls	r21, r25
 234:	59 02       	muls	r21, r25
 236:	59 02       	muls	r21, r25
 238:	59 02       	muls	r21, r25
 23a:	59 02       	muls	r21, r25
 23c:	59 02       	muls	r21, r25
 23e:	59 02       	muls	r21, r25
 240:	59 02       	muls	r21, r25
 242:	59 02       	muls	r21, r25
 244:	59 02       	muls	r21, r25
 246:	59 02       	muls	r21, r25
 248:	59 02       	muls	r21, r25
 24a:	59 02       	muls	r21, r25
 24c:	59 02       	muls	r21, r25
 24e:	59 02       	muls	r21, r25
 250:	59 02       	muls	r21, r25
 252:	59 02       	muls	r21, r25
 254:	59 02       	muls	r21, r25
 256:	59 02       	muls	r21, r25
 258:	59 02       	muls	r21, r25
 25a:	59 02       	muls	r21, r25
 25c:	59 02       	muls	r21, r25
 25e:	0a 02       	muls	r16, r26
 260:	59 02       	muls	r21, r25
 262:	59 02       	muls	r21, r25
 264:	59 02       	muls	r21, r25
 266:	37 02       	muls	r19, r23
 268:	59 02       	muls	r21, r25
 26a:	59 02       	muls	r21, r25
 26c:	59 02       	muls	r21, r25
 26e:	59 02       	muls	r21, r25
 270:	59 02       	muls	r21, r25
 272:	41 02       	muls	r20, r17
 274:	46 02       	muls	r20, r22
 276:	59 02       	muls	r21, r25
 278:	14 02       	muls	r17, r20
 27a:	4b 02       	muls	r20, r27
 27c:	1e 02       	muls	r17, r30
 27e:	2d 02       	muls	r18, r29
 280:	59 02       	muls	r21, r25
 282:	59 02       	muls	r21, r25
 284:	59 02       	muls	r21, r25
 286:	23 02       	muls	r18, r19

00000288 <__trampolines_start>:
 288:	0c 94 41 02 	jmp	0x482	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 28c:	0c 94 28 02 	jmp	0x450	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 290:	0c 94 32 02 	jmp	0x464	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 294:	0c 94 37 02 	jmp	0x46e	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 298:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 29c:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 2a0:	0c 94 4b 02 	jmp	0x496	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 2a4:	0c 94 19 02 	jmp	0x432	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 2a8:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 2ac:	0c 94 3c 02 	jmp	0x478	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 2b0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 2b4:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 2b8:	0c 94 46 02 	jmp	0x48c	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 2bc:	0c 94 23 02 	jmp	0x446	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 2c0:	0c 94 14 02 	jmp	0x428	; 0x428 <__LOCK_REGION_LENGTH__+0x28>

000002c4 <__ctors_end>:
 2c4:	11 24       	eor	r1, r1
 2c6:	1f be       	out	0x3f, r1	; 63
 2c8:	cf ef       	ldi	r28, 0xFF	; 255
 2ca:	cd bf       	out	0x3d, r28	; 61
 2cc:	df e3       	ldi	r29, 0x3F	; 63
 2ce:	de bf       	out	0x3e, r29	; 62
 2d0:	00 e0       	ldi	r16, 0x00	; 0
 2d2:	0c bf       	out	0x3c, r16	; 60
 2d4:	18 be       	out	0x38, r1	; 56
 2d6:	19 be       	out	0x39, r1	; 57
 2d8:	1a be       	out	0x3a, r1	; 58
 2da:	1b be       	out	0x3b, r1	; 59

000002dc <__do_copy_data>:
 2dc:	14 e2       	ldi	r17, 0x24	; 36
 2de:	a0 e0       	ldi	r26, 0x00	; 0
 2e0:	b0 e2       	ldi	r27, 0x20	; 32
 2e2:	e0 e5       	ldi	r30, 0x50	; 80
 2e4:	f8 e0       	ldi	r31, 0x08	; 8
 2e6:	00 e0       	ldi	r16, 0x00	; 0
 2e8:	0b bf       	out	0x3b, r16	; 59
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <__do_copy_data+0x14>
 2ec:	07 90       	elpm	r0, Z+
 2ee:	0d 92       	st	X+, r0
 2f0:	a2 30       	cpi	r26, 0x02	; 2
 2f2:	b1 07       	cpc	r27, r17
 2f4:	d9 f7       	brne	.-10     	; 0x2ec <__do_copy_data+0x10>
 2f6:	1b be       	out	0x3b, r1	; 59

000002f8 <__do_clear_bss>:
 2f8:	24 e2       	ldi	r18, 0x24	; 36
 2fa:	a2 e0       	ldi	r26, 0x02	; 2
 2fc:	b4 e2       	ldi	r27, 0x24	; 36
 2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
 300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
 302:	a3 30       	cpi	r26, 0x03	; 3
 304:	b2 07       	cpc	r27, r18
 306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
 308:	0e 94 a0 01 	call	0x340	; 0x340 <main>
 30c:	0c 94 26 04 	jmp	0x84c	; 0x84c <_exit>

00000310 <__bad_interrupt>:
 310:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000314 <clock_init>:

 .section .text

 .global clock_init
 clock_init:
	push r24
 314:	8f 93       	push	r24

	ldi r24, OSC_RC32MEN_bm
 316:	82 e0       	ldi	r24, 0x02	; 2
	sts OSC_CTRL, R24		;Enables the 32MHz internal oscillator
 318:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>

0000031c <check32MHzStatus>:

check32MHzStatus:
	lds	r24, OSC_STATUS
 31c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
	;Ensure that the 32MHz clock is ready before proceeding
	sbrs r24, OSC_RC32MRDY_bp
 320:	81 ff       	sbrs	r24, 1
	rjmp check32MHzStatus
 322:	fc cf       	rjmp	.-8      	; 0x31c <check32MHzStatus>

	;Writing to CCP disables interrupts for a certain number of cycles
	;to give the clock time to switch sources. It also enables writes to certain registers.
	ldi r24, 0xD8
 324:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24				
 326:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x7de034>

	;Finally, select the now-ready 32MHz oscillator as the new clock source. 
	ldi	r24, 0x01
 32a:	81 e0       	ldi	r24, 0x01	; 1
	sts CLK_CTRL, r24
 32c:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>

00000330 <skip32MHZ_enable>:
skip32MHZ_enable:
	;CPU CLK prescaler settings 
	;Use values that are powers of 2 from 1 to 512 (1, 2, 4, 8, 16, ..., 512) for A. See Table 7-2 in the manual. 
	;You can also change B/C. See Table 7-3 in the manual. 

	ldi r24, 0xD8
 330:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24
 332:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x7de034>
	
	ldi r24, ((0x00 << 2) | (0x00 << 0))	;32MHz
 336:	80 e0       	ldi	r24, 0x00	; 0
	;ldi r24, (CLK_PSADIV_4_gc | CLK_PSBCDIV_1_1_gc) ;8MHz

	sts CLK_PSCTRL, r24
 338:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__TEXT_REGION_LENGTH__+0x7de041>

	pop r24
 33c:	8f 91       	pop	r24

 33e:	08 95       	ret

00000340 <main>:
extern void clock_init(void);
volatile char button;
uint8_t switchState = 1;

int main(void)
{
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	cd b7       	in	r28, 0x3d	; 61
 346:	de b7       	in	r29, 0x3e	; 62
	clock_init();
 348:	0e 94 8a 01 	call	0x314	; 0x314 <clock_init>
	usartd0_init();
 34c:	0e 94 cd 02 	call	0x59a	; 0x59a <usartd0_init>
	
	//init speakers
	PORTC.OUTSET = 1<<7;
 350:	80 e4       	ldi	r24, 0x40	; 64
 352:	96 e0       	ldi	r25, 0x06	; 6
 354:	20 e8       	ldi	r18, 0x80	; 128
 356:	fc 01       	movw	r30, r24
 358:	25 83       	std	Z+5, r18	; 0x05
	PORTC.DIRSET = 1<<7;
 35a:	80 e4       	ldi	r24, 0x40	; 64
 35c:	96 e0       	ldi	r25, 0x06	; 6
 35e:	20 e8       	ldi	r18, 0x80	; 128
 360:	fc 01       	movw	r30, r24
 362:	21 83       	std	Z+1, r18	; 0x01
	
	dac_init();
 364:	0e 94 03 03 	call	0x606	; 0x606 <dac_init>
	dma_init();
 368:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <dma_init>
	
	tcc1_init();
 36c:	0e 94 42 03 	call	0x684	; 0x684 <tcc1_init>
	while(1)
	{
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	20 e0       	ldi	r18, 0x00	; 0
 376:	31 e0       	ldi	r19, 0x01	; 1
 378:	f9 01       	movw	r30, r18
 37a:	20 89       	ldd	r18, Z+16	; 0x10
 37c:	20 68       	ori	r18, 0x80	; 128
 37e:	fc 01       	movw	r30, r24
 380:	20 8b       	std	Z+16, r18	; 0x10
	}
 382:	f6 cf       	rjmp	.-20     	; 0x370 <main+0x30>

00000384 <__vector_88>:
}

ISR(USARTD0_RXC_vect)
{
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 38c:	0f 92       	push	r0
 38e:	11 24       	eor	r1, r1
 390:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 394:	0f 92       	push	r0
 396:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 39a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x7de039>
 39e:	0f 92       	push	r0
 3a0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x7de039>
 3a4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 3a8:	0f 92       	push	r0
 3aa:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 3ae:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 3b2:	0f 92       	push	r0
 3b4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 3b8:	2f 93       	push	r18
 3ba:	3f 93       	push	r19
 3bc:	4f 93       	push	r20
 3be:	5f 93       	push	r21
 3c0:	6f 93       	push	r22
 3c2:	7f 93       	push	r23
 3c4:	8f 93       	push	r24
 3c6:	9f 93       	push	r25
 3c8:	af 93       	push	r26
 3ca:	bf 93       	push	r27
 3cc:	ef 93       	push	r30
 3ce:	ff 93       	push	r31
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
	cli();
 3d8:	f8 94       	cli
	button = usartd0_in_char();
 3da:	0e 94 b7 02 	call	0x56e	; 0x56e <usartd0_in_char>
 3de:	80 93 02 24 	sts	0x2402, r24	; 0x802402 <__data_end>
	switch (button)
 3e2:	80 91 02 24 	lds	r24, 0x2402	; 0x802402 <__data_end>
 3e6:	88 2f       	mov	r24, r24
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	09 2e       	mov	r0, r25
 3ec:	00 0c       	add	r0, r0
 3ee:	aa 0b       	sbc	r26, r26
 3f0:	bb 0b       	sbc	r27, r27
 3f2:	44 e3       	ldi	r20, 0x34	; 52
 3f4:	50 e0       	ldi	r21, 0x00	; 0
 3f6:	25 e4       	ldi	r18, 0x45	; 69
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	84 1b       	sub	r24, r20
 3fc:	95 0b       	sbc	r25, r21
 3fe:	28 17       	cp	r18, r24
 400:	39 07       	cpc	r19, r25
 402:	08 f4       	brcc	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	56 c0       	rjmp	.+172    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 406:	fc 01       	movw	r30, r24
 408:	88 27       	eor	r24, r24
 40a:	e2 50       	subi	r30, 0x02	; 2
 40c:	ff 4f       	sbci	r31, 0xFF	; 255
 40e:	8f 4f       	sbci	r24, 0xFF	; 255
 410:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__tablejump2__>
	{
		case 'e':
		tcc0_init(119);
 414:	87 e7       	ldi	r24, 0x77	; 119
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 23 03 	call	0x646	; 0x646 <tcc0_init>
		//hold(button);
		break;
 41c:	4a c0       	rjmp	.+148    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		
		case '4':
		tcc0_init(113);
 41e:	81 e7       	ldi	r24, 0x71	; 113
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 23 03 	call	0x646	; 0x646 <tcc0_init>
		//hold(button);
		break;
 426:	45 c0       	rjmp	.+138    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		
		case 'r':
		tcc0_init(106);
 428:	8a e6       	ldi	r24, 0x6A	; 106
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 23 03 	call	0x646	; 0x646 <tcc0_init>
		//hold(button);
		break;
 430:	40 c0       	rjmp	.+128    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		
		case '5':
		tcc0_init(100);
 432:	84 e6       	ldi	r24, 0x64	; 100
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 23 03 	call	0x646	; 0x646 <tcc0_init>
		//hold(button);
		break;
 43a:	3b c0       	rjmp	.+118    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		
		case 't':
		tcc0_init(95);
 43c:	8f e5       	ldi	r24, 0x5F	; 95
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 23 03 	call	0x646	; 0x646 <tcc0_init>
		//hold(button);
		break;
 444:	36 c0       	rjmp	.+108    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		
		case 'y':
		tcc0_init(89);
 446:	89 e5       	ldi	r24, 0x59	; 89
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 23 03 	call	0x646	; 0x646 <tcc0_init>
		//hold(button);
		break;
 44e:	31 c0       	rjmp	.+98     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		
		case '7':
		tcc0_init(84);
 450:	84 e5       	ldi	r24, 0x54	; 84
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 23 03 	call	0x646	; 0x646 <tcc0_init>
		//hold(button);
		break;
 458:	2c c0       	rjmp	.+88     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		
		case 'u':
		tcc0_init(80);
 45a:	80 e5       	ldi	r24, 0x50	; 80
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 23 03 	call	0x646	; 0x646 <tcc0_init>
		//hold(button);
		break;
 462:	27 c0       	rjmp	.+78     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		
		case '8':
		tcc0_init(75);
 464:	8b e4       	ldi	r24, 0x4B	; 75
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 23 03 	call	0x646	; 0x646 <tcc0_init>
		//hold(button);
		break;
 46c:	22 c0       	rjmp	.+68     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		
		case 'i':
		tcc0_init(71);
 46e:	87 e4       	ldi	r24, 0x47	; 71
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 23 03 	call	0x646	; 0x646 <tcc0_init>
		//hold(button);
		break;
 476:	1d c0       	rjmp	.+58     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		
		case '9':
		tcc0_init(67);
 478:	83 e4       	ldi	r24, 0x43	; 67
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 23 03 	call	0x646	; 0x646 <tcc0_init>
		//hold(button);
		break;
 480:	18 c0       	rjmp	.+48     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		
		case 'o':
		tcc0_init(63);
 482:	8f e3       	ldi	r24, 0x3F	; 63
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 23 03 	call	0x646	; 0x646 <tcc0_init>
		//hold(button);
		break;
 48a:	13 c0       	rjmp	.+38     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		
		case 'p':
		tcc0_init(60);
 48c:	8c e3       	ldi	r24, 0x3C	; 60
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 23 03 	call	0x646	; 0x646 <tcc0_init>
		//hold(button);
		break;
 494:	0e c0       	rjmp	.+28     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		
		case 's':
		if (switchState == 1)
 496:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	29 f4       	brne	.+10     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
		{
			dma_init_expDecay();
 49e:	0e 94 bc 03 	call	0x778	; 0x778 <dma_init_expDecay>
			switchState = 0;
 4a2:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
 4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		}
		else
		{
			dma_init();
 4a8:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <dma_init>
			switchState = 1;
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
		}
	}
	TCC1.CTRLA = TC_CLKSEL_DIV1024_gc;
 4b2:	80 e4       	ldi	r24, 0x40	; 64
 4b4:	98 e0       	ldi	r25, 0x08	; 8
 4b6:	27 e0       	ldi	r18, 0x07	; 7
 4b8:	fc 01       	movw	r30, r24
 4ba:	20 83       	st	Z, r18
	//button = 0;
	sei();
 4bc:	78 94       	sei
}
 4be:	00 00       	nop
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	ff 91       	pop	r31
 4c6:	ef 91       	pop	r30
 4c8:	bf 91       	pop	r27
 4ca:	af 91       	pop	r26
 4cc:	9f 91       	pop	r25
 4ce:	8f 91       	pop	r24
 4d0:	7f 91       	pop	r23
 4d2:	6f 91       	pop	r22
 4d4:	5f 91       	pop	r21
 4d6:	4f 91       	pop	r20
 4d8:	3f 91       	pop	r19
 4da:	2f 91       	pop	r18
 4dc:	0f 90       	pop	r0
 4de:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 4e2:	0f 90       	pop	r0
 4e4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 4e8:	0f 90       	pop	r0
 4ea:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x7de039>
 4ee:	0f 90       	pop	r0
 4f0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 4f4:	0f 90       	pop	r0
 4f6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 4fa:	0f 90       	pop	r0
 4fc:	1f 90       	pop	r1
 4fe:	18 95       	reti

00000500 <__vector_20>:
ISR(TCC1_OVF_vect)
{
 500:	1f 92       	push	r1
 502:	0f 92       	push	r0
 504:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 508:	0f 92       	push	r0
 50a:	11 24       	eor	r1, r1
 50c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 510:	0f 92       	push	r0
 512:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 516:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 51a:	0f 92       	push	r0
 51c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 520:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 524:	0f 92       	push	r0
 526:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 52a:	8f 93       	push	r24
 52c:	9f 93       	push	r25
 52e:	ef 93       	push	r30
 530:	ff 93       	push	r31
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	cd b7       	in	r28, 0x3d	; 61
 538:	de b7       	in	r29, 0x3e	; 62
		TCC0.CTRLA = TC_CLKSEL_OFF_gc;
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	98 e0       	ldi	r25, 0x08	; 8
 53e:	fc 01       	movw	r30, r24
 540:	10 82       	st	Z, r1
 542:	00 00       	nop
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	ff 91       	pop	r31
 54a:	ef 91       	pop	r30
 54c:	9f 91       	pop	r25
 54e:	8f 91       	pop	r24
 550:	0f 90       	pop	r0
 552:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 556:	0f 90       	pop	r0
 558:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 55c:	0f 90       	pop	r0
 55e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 562:	0f 90       	pop	r0
 564:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 568:	0f 90       	pop	r0
 56a:	1f 90       	pop	r1
 56c:	18 95       	reti

0000056e <usartd0_in_char>:
}

void usartd0_in_string(char * buf)
{
	while(*buf) usartd0_in_char();
}
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62
 576:	00 00       	nop
 578:	80 ea       	ldi	r24, 0xA0	; 160
 57a:	99 e0       	ldi	r25, 0x09	; 9
 57c:	fc 01       	movw	r30, r24
 57e:	81 81       	ldd	r24, Z+1	; 0x01
 580:	88 2f       	mov	r24, r24
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	80 72       	andi	r24, 0x20	; 32
 586:	99 27       	eor	r25, r25
 588:	89 2b       	or	r24, r25
 58a:	b1 f3       	breq	.-20     	; 0x578 <usartd0_in_char+0xa>
 58c:	80 ea       	ldi	r24, 0xA0	; 160
 58e:	99 e0       	ldi	r25, 0x09	; 9
 590:	fc 01       	movw	r30, r24
 592:	80 81       	ld	r24, Z
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	08 95       	ret

0000059a <usartd0_init>:

void usartd0_init(void)
{
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	cd b7       	in	r28, 0x3d	; 61
 5a0:	de b7       	in	r29, 0x3e	; 62
  /* Configure relevant TxD and RxD pins. */
	PORTD.OUTSET = PIN3_bm;
 5a2:	80 e6       	ldi	r24, 0x60	; 96
 5a4:	96 e0       	ldi	r25, 0x06	; 6
 5a6:	28 e0       	ldi	r18, 0x08	; 8
 5a8:	fc 01       	movw	r30, r24
 5aa:	25 83       	std	Z+5, r18	; 0x05
	PORTD.DIRSET = PIN3_bm;
 5ac:	80 e6       	ldi	r24, 0x60	; 96
 5ae:	96 e0       	ldi	r25, 0x06	; 6
 5b0:	28 e0       	ldi	r18, 0x08	; 8
 5b2:	fc 01       	movw	r30, r24
 5b4:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 5b6:	80 e6       	ldi	r24, 0x60	; 96
 5b8:	96 e0       	ldi	r25, 0x06	; 6
 5ba:	24 e0       	ldi	r18, 0x04	; 4
 5bc:	fc 01       	movw	r30, r24
 5be:	22 83       	std	Z+2, r18	; 0x02

  /* Configure baud rate. */
	USARTD0.BAUDCTRLA = (uint8_t)BSEL;
 5c0:	80 ea       	ldi	r24, 0xA0	; 160
 5c2:	99 e0       	ldi	r25, 0x09	; 9
 5c4:	21 e2       	ldi	r18, 0x21	; 33
 5c6:	fc 01       	movw	r30, r24
 5c8:	26 83       	std	Z+6, r18	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)((BSCALE << 4)|(BSEL >> 8));
 5ca:	80 ea       	ldi	r24, 0xA0	; 160
 5cc:	99 e0       	ldi	r25, 0x09	; 9
 5ce:	20 ef       	ldi	r18, 0xF0	; 240
 5d0:	fc 01       	movw	r30, r24
 5d2:	27 83       	std	Z+7, r18	; 0x07

  /* Configure remainder of serial protocol. */
  /* (In this example, a protocol with 8 data bits, no parity, and
   *  one stop bit is chosen.) */
	USARTD0.CTRLC =	(USART_CMODE_ASYNCHRONOUS_gc |
 5d4:	80 ea       	ldi	r24, 0xA0	; 160
 5d6:	99 e0       	ldi	r25, 0x09	; 9
 5d8:	23 e0       	ldi	r18, 0x03	; 3
 5da:	fc 01       	movw	r30, r24
 5dc:	25 83       	std	Z+5, r18	; 0x05
	/*USARTD0.CTRLC =	(USART_CMODE_ASYNCHRONOUS_gc |
					USART_PMODE_ODD_gc  	 |
					USART_CHSIZE_8BIT_gc);*/

  /* Enable receiver and/or transmitter systems. */
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 5de:	80 ea       	ldi	r24, 0xA0	; 160
 5e0:	99 e0       	ldi	r25, 0x09	; 9
 5e2:	28 e1       	ldi	r18, 0x18	; 24
 5e4:	fc 01       	movw	r30, r24
 5e6:	24 83       	std	Z+4, r18	; 0x04
	
	PMIC.CTRL = 0x01;
 5e8:	80 ea       	ldi	r24, 0xA0	; 160
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	21 e0       	ldi	r18, 0x01	; 1
 5ee:	fc 01       	movw	r30, r24
 5f0:	22 83       	std	Z+2, r18	; 0x02
	sei();
 5f2:	78 94       	sei
	
  /* Enable interrupt (optional). */
	 USARTD0.CTRLA = USART_RXCINTLVL_LO_gc; 
 5f4:	80 ea       	ldi	r24, 0xA0	; 160
 5f6:	99 e0       	ldi	r25, 0x09	; 9
 5f8:	20 e1       	ldi	r18, 0x10	; 16
 5fa:	fc 01       	movw	r30, r24
 5fc:	23 83       	std	Z+3, r18	; 0x03
}
 5fe:	00 00       	nop
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	08 95       	ret

00000606 <dac_init>:

void hold(char pressed)
{
	while(usartd0_in_char() == pressed);
	TCC0.CTRLA = 0;
}
 606:	cf 93       	push	r28
 608:	df 93       	push	r29
 60a:	cd b7       	in	r28, 0x3d	; 61
 60c:	de b7       	in	r29, 0x3e	; 62
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	96 e0       	ldi	r25, 0x06	; 6
 612:	28 e0       	ldi	r18, 0x08	; 8
 614:	fc 01       	movw	r30, r24
 616:	21 83       	std	Z+1, r18	; 0x01
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	93 e0       	ldi	r25, 0x03	; 3
 61c:	22 e2       	ldi	r18, 0x22	; 34
 61e:	fc 01       	movw	r30, r24
 620:	21 83       	std	Z+1, r18	; 0x01
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	93 e0       	ldi	r25, 0x03	; 3
 626:	28 e1       	ldi	r18, 0x18	; 24
 628:	fc 01       	movw	r30, r24
 62a:	22 83       	std	Z+2, r18	; 0x02
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	93 e0       	ldi	r25, 0x03	; 3
 630:	fc 01       	movw	r30, r24
 632:	13 82       	std	Z+3, r1	; 0x03
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	93 e0       	ldi	r25, 0x03	; 3
 638:	29 e0       	ldi	r18, 0x09	; 9
 63a:	fc 01       	movw	r30, r24
 63c:	20 83       	st	Z, r18
 63e:	00 00       	nop
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	08 95       	ret

00000646 <tcc0_init>:

void tcc0_init(uint16_t note)
{
 646:	cf 93       	push	r28
 648:	df 93       	push	r29
 64a:	1f 92       	push	r1
 64c:	1f 92       	push	r1
 64e:	cd b7       	in	r28, 0x3d	; 61
 650:	de b7       	in	r29, 0x3e	; 62
 652:	89 83       	std	Y+1, r24	; 0x01
 654:	9a 83       	std	Y+2, r25	; 0x02
	*/
	
	//PMIC.CTRL = 0x01;
	//sei();
	//TCC0.INTCTRLA = TC0_OVFINTLVL0_bm;
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
 656:	80 e8       	ldi	r24, 0x80	; 128
 658:	91 e0       	ldi	r25, 0x01	; 1
 65a:	20 ec       	ldi	r18, 0xC0	; 192
 65c:	fc 01       	movw	r30, r24
 65e:	20 83       	st	Z, r18
	//80 per with div2 is 783.7 approx
	//161 per with div1 is 783.6 approx
	TCC0.PER = note;
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	98 e0       	ldi	r25, 0x08	; 8
 664:	29 81       	ldd	r18, Y+1	; 0x01
 666:	3a 81       	ldd	r19, Y+2	; 0x02
 668:	fc 01       	movw	r30, r24
 66a:	26 a3       	std	Z+38, r18	; 0x26
 66c:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	98 e0       	ldi	r25, 0x08	; 8
 672:	21 e0       	ldi	r18, 0x01	; 1
 674:	fc 01       	movw	r30, r24
 676:	20 83       	st	Z, r18
	
	//clk freq/ pre * time i want
	//(32MHZ/1 * (1/784))/256		256 is how many data points
	//add 50 to 784 for part 2.3
	//+- 2% expected value * 2% +
}
 678:	00 00       	nop
 67a:	0f 90       	pop	r0
 67c:	0f 90       	pop	r0
 67e:	df 91       	pop	r29
 680:	cf 91       	pop	r28
 682:	08 95       	ret

00000684 <tcc1_init>:

void tcc1_init(void)
{
 684:	cf 93       	push	r28
 686:	df 93       	push	r29
 688:	cd b7       	in	r28, 0x3d	; 61
 68a:	de b7       	in	r29, 0x3e	; 62
	TCC1.PER = 20000;
 68c:	80 e4       	ldi	r24, 0x40	; 64
 68e:	98 e0       	ldi	r25, 0x08	; 8
 690:	20 e2       	ldi	r18, 0x20	; 32
 692:	3e e4       	ldi	r19, 0x4E	; 78
 694:	fc 01       	movw	r30, r24
 696:	26 a3       	std	Z+38, r18	; 0x26
 698:	37 a3       	std	Z+39, r19	; 0x27
	//TCC1.CTRLA = TC_CLKSEL_DIV2_gc;
	TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
 69a:	80 e4       	ldi	r24, 0x40	; 64
 69c:	98 e0       	ldi	r25, 0x08	; 8
 69e:	21 e0       	ldi	r18, 0x01	; 1
 6a0:	fc 01       	movw	r30, r24
 6a2:	26 83       	std	Z+6, r18	; 0x06
	PMIC.CTRL = 0x01;
 6a4:	80 ea       	ldi	r24, 0xA0	; 160
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	21 e0       	ldi	r18, 0x01	; 1
 6aa:	fc 01       	movw	r30, r24
 6ac:	22 83       	std	Z+2, r18	; 0x02
}
 6ae:	00 00       	nop
 6b0:	df 91       	pop	r29
 6b2:	cf 91       	pop	r28
 6b4:	08 95       	ret

000006b6 <dma_init>:

void dma_init(void)
{
 6b6:	cf 93       	push	r28
 6b8:	df 93       	push	r29
 6ba:	cd b7       	in	r28, 0x3d	; 61
 6bc:	de b7       	in	r29, 0x3e	; 62
	//reset entire dma perif
	DMA.CTRL |= DMA_RESET_bm;
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	91 e0       	ldi	r25, 0x01	; 1
 6c2:	20 e0       	ldi	r18, 0x00	; 0
 6c4:	31 e0       	ldi	r19, 0x01	; 1
 6c6:	f9 01       	movw	r30, r18
 6c8:	20 81       	ld	r18, Z
 6ca:	20 64       	ori	r18, 0x40	; 64
 6cc:	fc 01       	movw	r30, r24
 6ce:	20 83       	st	Z, r18
	
	DMA.CH0.CTRLA = DMA_CH_SINGLE_bm | DMA_CH_BURSTLEN_2BYTE_gc;
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	91 e0       	ldi	r25, 0x01	; 1
 6d4:	25 e0       	ldi	r18, 0x05	; 5
 6d6:	fc 01       	movw	r30, r24
 6d8:	20 8b       	std	Z+16, r18	; 0x10
	
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc | 
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	91 e0       	ldi	r25, 0x01	; 1
 6de:	29 e5       	ldi	r18, 0x59	; 89
 6e0:	fc 01       	movw	r30, r24
 6e2:	22 8b       	std	Z+18, r18	; 0x12
						DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc;
	
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH0_gc;
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	91 e0       	ldi	r25, 0x01	; 1
 6e8:	21 e0       	ldi	r18, 0x01	; 1
 6ea:	fc 01       	movw	r30, r24
 6ec:	23 8b       	std	Z+19, r18	; 0x13
	
	DMA.CH0.TRFCNT = (uint16_t)(sizeof(sine));
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	91 e0       	ldi	r25, 0x01	; 1
 6f2:	20 e0       	ldi	r18, 0x00	; 0
 6f4:	32 e0       	ldi	r19, 0x02	; 2
 6f6:	fc 01       	movw	r30, r24
 6f8:	24 8b       	std	Z+20, r18	; 0x14
 6fa:	35 8b       	std	Z+21, r19	; 0x15
	
	DMA.CH0.SRCADDR0 = (uint8_t)((uintptr_t)sine);
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	91 e0       	ldi	r25, 0x01	; 1
 700:	21 e0       	ldi	r18, 0x01	; 1
 702:	30 e2       	ldi	r19, 0x20	; 32
 704:	fc 01       	movw	r30, r24
 706:	20 8f       	std	Z+24, r18	; 0x18
	DMA.CH0.SRCADDR1 = (uint8_t)(((uintptr_t)sine)>>8);
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	91 e0       	ldi	r25, 0x01	; 1
 70c:	21 e0       	ldi	r18, 0x01	; 1
 70e:	30 e2       	ldi	r19, 0x20	; 32
 710:	23 2f       	mov	r18, r19
 712:	33 27       	eor	r19, r19
 714:	fc 01       	movw	r30, r24
 716:	21 8f       	std	Z+25, r18	; 0x19
	DMA.CH0.SRCADDR2 = (uint8_t)(((uint32_t)((uintptr_t)sine))>>16);
 718:	20 e0       	ldi	r18, 0x00	; 0
 71a:	31 e0       	ldi	r19, 0x01	; 1
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	90 e2       	ldi	r25, 0x20	; 32
 720:	cc 01       	movw	r24, r24
 722:	a0 e0       	ldi	r26, 0x00	; 0
 724:	b0 e0       	ldi	r27, 0x00	; 0
 726:	cd 01       	movw	r24, r26
 728:	aa 27       	eor	r26, r26
 72a:	bb 27       	eor	r27, r27
 72c:	f9 01       	movw	r30, r18
 72e:	82 8f       	std	Z+26, r24	; 0x1a
	
	DMA.CH0.DESTADDR0 = (uint8_t)((uintptr_t)&DACA.CH1DATA);
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	91 e0       	ldi	r25, 0x01	; 1
 734:	2a e1       	ldi	r18, 0x1A	; 26
 736:	fc 01       	movw	r30, r24
 738:	24 8f       	std	Z+28, r18	; 0x1c
	DMA.CH0.DESTADDR1 = (uint8_t)(((uintptr_t)&DACA.CH1DATA)>>8);
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	91 e0       	ldi	r25, 0x01	; 1
 73e:	23 e0       	ldi	r18, 0x03	; 3
 740:	fc 01       	movw	r30, r24
 742:	25 8f       	std	Z+29, r18	; 0x1d
	DMA.CH0.DESTADDR2 = (uint8_t)(((uint32_t)((uintptr_t)&DACA.CH1DATA))>>16);
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	91 e0       	ldi	r25, 0x01	; 1
 748:	fc 01       	movw	r30, r24
 74a:	16 8e       	std	Z+30, r1	; 0x1e
	
	//enable channel 0
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	91 e0       	ldi	r25, 0x01	; 1
 750:	20 e0       	ldi	r18, 0x00	; 0
 752:	31 e0       	ldi	r19, 0x01	; 1
 754:	f9 01       	movw	r30, r18
 756:	20 89       	ldd	r18, Z+16	; 0x10
 758:	20 68       	ori	r18, 0x80	; 128
 75a:	fc 01       	movw	r30, r24
 75c:	20 8b       	std	Z+16, r18	; 0x10
	
	//EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
	
	//enable entire dma
	DMA.CTRL |= DMA_ENABLE_bm;
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	91 e0       	ldi	r25, 0x01	; 1
 762:	20 e0       	ldi	r18, 0x00	; 0
 764:	31 e0       	ldi	r19, 0x01	; 1
 766:	f9 01       	movw	r30, r18
 768:	20 81       	ld	r18, Z
 76a:	20 68       	ori	r18, 0x80	; 128
 76c:	fc 01       	movw	r30, r24
 76e:	20 83       	st	Z, r18
	
}
 770:	00 00       	nop
 772:	df 91       	pop	r29
 774:	cf 91       	pop	r28
 776:	08 95       	ret

00000778 <dma_init_expDecay>:

void dma_init_expDecay(void)
{
 778:	cf 93       	push	r28
 77a:	df 93       	push	r29
 77c:	cd b7       	in	r28, 0x3d	; 61
 77e:	de b7       	in	r29, 0x3e	; 62
		//reset entire dma perif
		DMA.CTRL |= DMA_RESET_bm;
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	91 e0       	ldi	r25, 0x01	; 1
 784:	20 e0       	ldi	r18, 0x00	; 0
 786:	31 e0       	ldi	r19, 0x01	; 1
 788:	f9 01       	movw	r30, r18
 78a:	20 81       	ld	r18, Z
 78c:	20 64       	ori	r18, 0x40	; 64
 78e:	fc 01       	movw	r30, r24
 790:	20 83       	st	Z, r18
		
		DMA.CH0.CTRLA = DMA_CH_SINGLE_bm | DMA_CH_BURSTLEN_2BYTE_gc;
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	91 e0       	ldi	r25, 0x01	; 1
 796:	25 e0       	ldi	r18, 0x05	; 5
 798:	fc 01       	movw	r30, r24
 79a:	20 8b       	std	Z+16, r18	; 0x10
		
		DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc |
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	91 e0       	ldi	r25, 0x01	; 1
 7a0:	29 e5       	ldi	r18, 0x59	; 89
 7a2:	fc 01       	movw	r30, r24
 7a4:	22 8b       	std	Z+18, r18	; 0x12
		DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc;
		
		DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH0_gc;
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	91 e0       	ldi	r25, 0x01	; 1
 7aa:	21 e0       	ldi	r18, 0x01	; 1
 7ac:	fc 01       	movw	r30, r24
 7ae:	23 8b       	std	Z+19, r18	; 0x13
		
		DMA.CH0.TRFCNT = (uint16_t)(sizeof(expDecay));
 7b0:	80 e0       	ldi	r24, 0x00	; 0
 7b2:	91 e0       	ldi	r25, 0x01	; 1
 7b4:	20 e0       	ldi	r18, 0x00	; 0
 7b6:	32 e0       	ldi	r19, 0x02	; 2
 7b8:	fc 01       	movw	r30, r24
 7ba:	24 8b       	std	Z+20, r18	; 0x14
 7bc:	35 8b       	std	Z+21, r19	; 0x15
		
		DMA.CH0.SRCADDR0 = (uint8_t)((uintptr_t)expDecay);
 7be:	80 e0       	ldi	r24, 0x00	; 0
 7c0:	91 e0       	ldi	r25, 0x01	; 1
 7c2:	21 e0       	ldi	r18, 0x01	; 1
 7c4:	32 e2       	ldi	r19, 0x22	; 34
 7c6:	fc 01       	movw	r30, r24
 7c8:	20 8f       	std	Z+24, r18	; 0x18
		DMA.CH0.SRCADDR1 = (uint8_t)(((uintptr_t)expDecay)>>8);
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	91 e0       	ldi	r25, 0x01	; 1
 7ce:	21 e0       	ldi	r18, 0x01	; 1
 7d0:	32 e2       	ldi	r19, 0x22	; 34
 7d2:	23 2f       	mov	r18, r19
 7d4:	33 27       	eor	r19, r19
 7d6:	fc 01       	movw	r30, r24
 7d8:	21 8f       	std	Z+25, r18	; 0x19
		DMA.CH0.SRCADDR2 = (uint8_t)(((uint32_t)((uintptr_t)expDecay))>>16);
 7da:	20 e0       	ldi	r18, 0x00	; 0
 7dc:	31 e0       	ldi	r19, 0x01	; 1
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	92 e2       	ldi	r25, 0x22	; 34
 7e2:	cc 01       	movw	r24, r24
 7e4:	a0 e0       	ldi	r26, 0x00	; 0
 7e6:	b0 e0       	ldi	r27, 0x00	; 0
 7e8:	cd 01       	movw	r24, r26
 7ea:	aa 27       	eor	r26, r26
 7ec:	bb 27       	eor	r27, r27
 7ee:	f9 01       	movw	r30, r18
 7f0:	82 8f       	std	Z+26, r24	; 0x1a
		
		DMA.CH0.DESTADDR0 = (uint8_t)((uintptr_t)&DACA.CH1DATA);
 7f2:	80 e0       	ldi	r24, 0x00	; 0
 7f4:	91 e0       	ldi	r25, 0x01	; 1
 7f6:	2a e1       	ldi	r18, 0x1A	; 26
 7f8:	fc 01       	movw	r30, r24
 7fa:	24 8f       	std	Z+28, r18	; 0x1c
		DMA.CH0.DESTADDR1 = (uint8_t)(((uintptr_t)&DACA.CH1DATA)>>8);
 7fc:	80 e0       	ldi	r24, 0x00	; 0
 7fe:	91 e0       	ldi	r25, 0x01	; 1
 800:	23 e0       	ldi	r18, 0x03	; 3
 802:	fc 01       	movw	r30, r24
 804:	25 8f       	std	Z+29, r18	; 0x1d
		DMA.CH0.DESTADDR2 = (uint8_t)(((uint32_t)((uintptr_t)&DACA.CH1DATA))>>16);
 806:	80 e0       	ldi	r24, 0x00	; 0
 808:	91 e0       	ldi	r25, 0x01	; 1
 80a:	fc 01       	movw	r30, r24
 80c:	16 8e       	std	Z+30, r1	; 0x1e
		
		//enable channel 0
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	91 e0       	ldi	r25, 0x01	; 1
 812:	20 e0       	ldi	r18, 0x00	; 0
 814:	31 e0       	ldi	r19, 0x01	; 1
 816:	f9 01       	movw	r30, r18
 818:	20 89       	ldd	r18, Z+16	; 0x10
 81a:	20 68       	ori	r18, 0x80	; 128
 81c:	fc 01       	movw	r30, r24
 81e:	20 8b       	std	Z+16, r18	; 0x10
		
		//enable entire dma
		DMA.CTRL |= DMA_ENABLE_bm;
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	91 e0       	ldi	r25, 0x01	; 1
 824:	20 e0       	ldi	r18, 0x00	; 0
 826:	31 e0       	ldi	r19, 0x01	; 1
 828:	f9 01       	movw	r30, r18
 82a:	20 81       	ld	r18, Z
 82c:	20 68       	ori	r18, 0x80	; 128
 82e:	fc 01       	movw	r30, r24
 830:	20 83       	st	Z, r18
 832:	00 00       	nop
 834:	df 91       	pop	r29
 836:	cf 91       	pop	r28
 838:	08 95       	ret

0000083a <__tablejump2__>:
 83a:	ee 0f       	add	r30, r30
 83c:	ff 1f       	adc	r31, r31
 83e:	88 1f       	adc	r24, r24
 840:	8b bf       	out	0x3b, r24	; 59
 842:	07 90       	elpm	r0, Z+
 844:	f6 91       	elpm	r31, Z
 846:	e0 2d       	mov	r30, r0
 848:	1b be       	out	0x3b, r1	; 59
 84a:	19 94       	eijmp

0000084c <_exit>:
 84c:	f8 94       	cli

0000084e <__stop_program>:
 84e:	ff cf       	rjmp	.-2      	; 0x84e <__stop_program>
